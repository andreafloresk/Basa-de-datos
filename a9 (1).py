# -*- coding: utf-8 -*-
"""a9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1klGgNjje840vDFZnH5AVrXn6u-ii6Bfb

# **A9: Regresi√≥n**
"""

import matplotlib.pyplot as plt
import numpy as np
import statsmodels.api as sm
from google.colab import drive
drive.mount('/content/drive')
import pandas as pd
from sklearn.linear_model import LinearRegression

path = "/content/drive/My Drive/a4/antropometria-dataset-1.csv"

df=pd.read_csv(path)
df.head(5)

print(df.columns)

df = df.dropna(subset=['cadera', 'peso'])
X = df[['cadera']].values.reshape(-1, 1)
y = df['peso'].values
model = LinearRegression()
model.fit(X, y)
coefficient = model.coef_
intercept = model.intercept_
print("Coefficient (slope):", model.coef_)
print("Intercept:", model.intercept_)
print("Partial regression coefficient (B1):", model.coef_[0])

plt.scatter(df['cadera'], df['peso'], color='black', label='Actual data')


predicted_values = model.predict(X)
plt.plot(df['cintura'], predicted_values, color='blue', linewidth=3, label='Regression line')

plt.title('Linear Regression: peso vs cintura')
plt.xlabel('peso')
plt.ylabel('cadera')
plt.legend()


plt.show()
print(f"Partial regression coefficient (B1): {model.coef_[0]}")

y_pred = model.predict(X)
residuals = y - y_pred
print(residuals)

df = df.dropna(subset=['cintura', 'peso'])
men_df = df[df['sexo'] == 1]
women_df = df[df['sexo'] == 2]

model_men = LinearRegression()
model_women = LinearRegression()

X_men = men_df[['cintura']].values.reshape(-1, 1)
y_men = men_df['peso'].values
model_men.fit(X_men, y_men)

X_women = women_df[['cintura']].values.reshape(-1, 1)
y_women = women_df['peso'].values
model_women.fit(X_women, y_women)

predicted_men = model_men.predict(X_men)
residuals_men = y_men - predicted_men

predicted_women = model_women.predict(X_women)
residuals_women = y_women - predicted_women

print(men_df.shape)
print(women_df.shape)

print(df['sexo'].unique())

X = df[['sistol']].values.reshape(-1, 1)
y = df['diastol'].values

model = LinearRegression()

model.fit(X, y)

y_pred = model.predict(X)

residuals = y - y_pred

median_residuals = np.median(residuals)

print(f"Median of residuals: {median_residuals}")



systole_diastole_correlation = df['sistol'].corr(df['diastol'])
print(f"Correlation coefficient between 'systole' and 'diastole': {systole_diastole_correlation}")